// questo è un file .scss
// al suo interno definiremo gli stili per la pagina in un linguaggio
// 100% retrocompatibile con .css ma che inoltre ci permetterà di
// utilizzare sintassi e direttive più potenti!

// FEATURES DEL LINGUAGGIO SCSS
// 1)
// SCSS è 100% retrocompatibile con CSS
body {
  background-color: purple;
  margin: 0;
}

// 2) SELETTORI ANNIDATI / NIDIFICATI ("nested")

// nav {
//   display: block;
//   width: 100%;
// }

// nav ul {
//   display: flex;
//   flex-direction: column;
//   margin: 0;
//   padding: 0;
//   list-style-type: none;
//   text-align: center;
// }

// nav ul li {
//   font-family: Arial, Helvetica, sans-serif;
// }

// nav ul li a {
//   text-decoration: none;
//   color: black;
// }
// -------------
nav {
  display: block;
  width: 100%;
  ul {
    // qui siamo in nav ul { }
    display: flex;
    flex-direction: column;
    margin: 0;
    padding: 0;
    list-style-type: none;
    text-align: center;
    li {
      // qui siamo in nav ul li { }
      font-family: Arial, Helvetica, sans-serif;
      a {
        // qui siamo in nav ul li a { }
        text-decoration: none;
        color: black;
      }
    }
  }
}

// 3) PSEUDOCLASSI IN SASS
// button.primary {
//   background-color: rgb(68, 68, 255);
// }

// button.primary:hover {
//   background-color: rgb(98, 227, 252);
// }

button.primary {
  background-color: rgb(68, 68, 255);
  &:hover {
    background-color: rgb(98, 227, 252);
  }
}

// miglioramenti alla Q O L -> Quality Of Life

// 4) PREFISSI COMUNI PER PROPRIETÀ SIMILI
// p {
//   font-size: 1.2em;
//   font-style: italic;
//   font-family: Arial;
//   font-weight: bold;
// }

// D R Y -> Don't Repeat Yourself

p {
  font: {
    size: 1.2em;
    style: italic;
    family: Arial;
    weight: bold;
  }
}

// fine delle abbreviazioni sintattiche

// 5) VARIABILI
// Le variabili in SASS hanno lo scopo di memorizzare un valore.
// In realtà, più che variabili le utilizzeremo come COSTANTI: difficilmente
// una variabile che inizialmente ospita un determinato valore verrà riutilizzata
// per ospitarne un altro.
// -> quindi concettualmente sono più simili alle costanti

// quali TIPI di valori si possono memorizzare in una variabile SASS?
// - valori numerici (1, 50, 10px, 2em, etc.)
// - stringhe ('hello', '2px solid black', "0 auto", etc.)
// - colori (red, #f3f3f3, #DE9129)
// - booleani (true, false)
// - null
// - LISTE (10px, 16px, 20px) -> un po' come gli ARRAY in JS
// - MAPPE di coppie chiave:valore -> un po' come gli OGGETTI in JS

// come si dichiara una variabile in SASS?
$my-color: green;
$main-margin: 25px;
$main-border: 2px solid black;
$button-padding: 0 15px;

// come si USA una variabile in SASS?
.secondary {
  background-color: $my-color; // green
  padding: $button-padding; // 0 15px;
}

// 6) MIXIN
// un "mixin" è un BLOCCO di regole/proprietà CSS richiamabili con un singolo nome

$default-radius: 15px;

@mixin centered {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin special-border {
  border: 1px dotted red;
  border-radius: $default-radius;
}

#btn-container {
  height: 200px;
  @include centered; // porto dentro in un colpo solo 3 regole di centramento
  @include special-border;
}

// un mixin può addirittura accettare PARAMETRI
@mixin main-title($text-size: 1em) {
  text-align: center;
  color: black;
  font: {
    size: $text-size;
    weight: bold;
    family: Arial;
  }
}

h1.title {
  @include main-title(1.5em);
}

h2.title {
  @include main-title(1.2em);
}

h3.title {
  @include main-title; // va di default a 1em come specificato nel valore predefinito
  // del parametro del mixin main-title()
}

// 7) INTERPOLAZIONE DI STRINGHE + VALORI

// in JS...
// const a = 'size'
// const b = `font-${a}` -> "font-size"

$a: 'size';
@mixin test {
  font-#{$a}: 16px; // font-size: 16px;
}

// 8) C I C L I (loops)
// in SASS è possibile utilizzare i CICLI per AUTOMATIZZARE la creazione di STILI "in serie"

$sizes: 12px, 16px, 20px, 24px;
// il mio scopo è creare delle CLASSI css in modo AUTOMATICO per assegnare
// la proprietà font-size di un elemento, utilizzando i valori della lista $sizes

@each $single-size in $sizes {
  // al primo giro del ciclo, $single-size è 12px
  // al secondo giro del ciclo, $single-size è 16px
  // al terzo giro del ciclo, $single-size è 20px
  // al quarto giro del ciclo, $single-size è 24px
  .text-#{$single-size} {
    font-size: $single-size;
  }
}

// però in SASS esistono anche le MAPPE: delle collezioni NON di solo valori,
// ma di COPPIE chiave:valore (come gli oggetti in JS)
$sizes-map: (
  small: 12px,
  medium: 16px,
  large: 20px,
  extralarge: 24px,
);

@each $name, $value in $sizes-map {
  // qui $name ad ogni giro sarà small, medium, large, extralarge
  // qui $value ad ogni giro sarà 12px, 16px, 20px, 24px
  .text-#{$name} {
    font-size: $value;
  }
}

$colors-map: (
  primary: blue,
  secondary: gray,
  success: green,
  danger: red,
);

@each $color-name, $color-value in $colors-map {
  .text-#{$color-name} {
    color: $color-value;
  }

  .bg-#{$color-name} {
    background-color: $color-value;
  }
}
